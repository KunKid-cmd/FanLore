# Generated by Django 5.1 on 2025-02-08 16:18

import datetime
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('username', models.CharField(max_length=255, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(max_length=255)),
                ('joined_date', models.DateTimeField(default=datetime.datetime.now)),
                ('managed_events', models.JSONField(default=list)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('criteria', models.CharField(max_length=255)),
                ('receive_dated', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('commentator_name', models.CharField(max_length=255)),
                ('comment_text', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Fandom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('username', models.CharField(max_length=255, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(max_length=255)),
                ('joined_date', models.DateTimeField(default=datetime.datetime.now)),
                ('followed_fandoms', models.JSONField(default=list)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='content_files/')),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('topic_img', models.FileField(upload_to='content_images/')),
                ('vote', models.IntegerField(default=0)),
                ('category', models.IntegerField(choices=[(1, 'Technology'), (2, 'Art'), (3, 'Entertainment'), (4, 'Science'), (5, 'Literature')], default=2)),
                ('comments', models.ManyToManyField(to='fanlore.comment')),
            ],
        ),
        migrations.CreateModel(
            name='Creator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('username', models.CharField(max_length=255, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(max_length=255)),
                ('joined_date', models.DateTimeField(default=datetime.datetime.now)),
                ('followed_fandoms', models.JSONField(default=list)),
                ('badges', models.ManyToManyField(related_name='creators', to='fanlore.badge')),
                ('contents', models.ManyToManyField(related_name='creators', to='fanlore.content')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='content',
            name='collaborator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fanlore.creator'),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('date', models.DateTimeField()),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fanlore.admin')),
                ('participants', models.ManyToManyField(to='fanlore.creator')),
            ],
        ),
        migrations.AddField(
            model_name='content',
            name='content_files',
            field=models.ManyToManyField(to='fanlore.file'),
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('topic', models.CharField(max_length=255)),
                ('reason', models.TextField()),
                ('reported_date', models.DateTimeField(auto_now_add=True)),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fanlore.content')),
                ('reported_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='fanlore.fandom')),
                ('reported_by_creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='fanlore.creator')),
            ],
        ),
    ]
